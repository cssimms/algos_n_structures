q
nn
n
disp self
q
n
disp idx
n
disp self
self
q
n
disp self
self
q
n
disp self
q
self
q
n
disp self
disp delf
q
n
disp heap
disp output
heap
n
heap
n
heap
n
heap
n
heap
q
array
parent_idx
array[parent_idx]
prc.call(array[parent_idx], array[target_child])
c
prc.call(array[parent_idx], array[target_child])
c
prc.call(array[parent_idx], array[target_child])
c
prc.call(array[parent_idx], array[target_child])
c
prc.call(array[parent_idx], array[target_child])
c
prc.call(array[parent_idx], array[target_child])
target_child
parent_idx
array
c
q
prc.call(7,4)
array[target_child]
array[parent_idx]
prc.call(1,2)
prc
prc.call(array[parent_idx], array[target_child])
prc.call(array[parent_idx]), array[target_child])
parent_idx
array
target_child
quit
array
array[parent_idx], array[child_idx] = array[child_idx], array[parent_idx]
parent_idx
array
quit
prc.call(array[parent_idx], array[child_idx])
quit
array[child_idx]
array[parent_idx]
prc.call(4,2)
child_idx
quit
array[0]
parent_idx
prc.call(2,1)
prc.call(2,2)
prc.call(1,2)
prc
quit
parent_index
